// <auto-generated />
using System;
using AutoSerivce.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AutoSerivce.Migrations
{
    [DbContext(typeof(AutoServiceContext))]
    [Migration("20230204155600_TableUsers")]
    partial class TableUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AutoSerivce.Models.AttachedProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttachedProductId")
                        .HasColumnType("int")
                        .HasColumnName("AttachedProductID");

                    b.Property<int>("MainProductId")
                        .HasColumnType("int")
                        .HasColumnName("MainProductID");

                    b.HasKey("Id");

                    b.HasIndex("AttachedProductId");

                    b.HasIndex("MainProductId");

                    b.ToTable("AttachedProduct", (string)null);
                });

            modelBuilder.Entity("AutoSerivce.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirsName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GenderCodeId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("GenderCodeId");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("AutoSerivce.Models.ClientService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ClientService", (string)null);
                });

            modelBuilder.Entity("AutoSerivce.Models.DocumentByService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ClientServiceID");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ClientServiceId");

                    b.ToTable("DocumentByService", (string)null);
                });

            modelBuilder.Entity("AutoSerivce.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Gender", (string)null);
                });

            modelBuilder.Entity("AutoSerivce.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Manufacturer", (string)null);
                });

            modelBuilder.Entity("AutoSerivce.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("money");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MainImagePath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int")
                        .HasColumnName("ManufacturerID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("AutoSerivce.Models.ProductPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPhoto", (string)null);
                });

            modelBuilder.Entity("AutoSerivce.Models.ProductSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ClientServiceID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ClientServiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductSale", (string)null);
                });

            modelBuilder.Entity("AutoSerivce.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("money");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("DurationWork")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MainImagePath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("AutoSerivce.Models.ServicePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicePhoto", (string)null);
                });

            modelBuilder.Entity("AutoSerivce.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)")
                        .IsFixedLength();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("AutoSerivce.Models.TagOfClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TagId");

                    b.ToTable("TagOfClient", (string)null);
                });

            modelBuilder.Entity("AutoSerivce.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AutoSerivce.Models.AttachedProduct", b =>
                {
                    b.HasOne("AutoSerivce.Models.Product", "AttachedProductNavigation")
                        .WithMany("AttachedProductAttachedProductNavigations")
                        .HasForeignKey("AttachedProductId")
                        .IsRequired()
                        .HasConstraintName("FK_AttachedProduct_Product1");

                    b.HasOne("AutoSerivce.Models.Product", "MainProduct")
                        .WithMany("AttachedProductMainProducts")
                        .HasForeignKey("MainProductId")
                        .IsRequired()
                        .HasConstraintName("FK_AttachedProduct_Product");

                    b.Navigation("AttachedProductNavigation");

                    b.Navigation("MainProduct");
                });

            modelBuilder.Entity("AutoSerivce.Models.Client", b =>
                {
                    b.HasOne("AutoSerivce.Models.Gender", "GenderCode")
                        .WithMany("Clients")
                        .HasForeignKey("GenderCodeId")
                        .IsRequired()
                        .HasConstraintName("FK_Client_Gender");

                    b.Navigation("GenderCode");
                });

            modelBuilder.Entity("AutoSerivce.Models.ClientService", b =>
                {
                    b.HasOne("AutoSerivce.Models.Client", "Client")
                        .WithMany("ClientServices")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientService_Client");

                    b.HasOne("AutoSerivce.Models.Service", "Service")
                        .WithMany("ClientServices")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientService_Service");

                    b.Navigation("Client");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AutoSerivce.Models.DocumentByService", b =>
                {
                    b.HasOne("AutoSerivce.Models.ClientService", "ClientService")
                        .WithMany("DocumentByServices")
                        .HasForeignKey("ClientServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentByService_ClientService");

                    b.Navigation("ClientService");
                });

            modelBuilder.Entity("AutoSerivce.Models.Product", b =>
                {
                    b.HasOne("AutoSerivce.Models.Manufacturer", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerId")
                        .HasConstraintName("FK_Product_Manufacturer");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("AutoSerivce.Models.ProductPhoto", b =>
                {
                    b.HasOne("AutoSerivce.Models.Product", "Product")
                        .WithMany("ProductPhotos")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductPhoto_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AutoSerivce.Models.ProductSale", b =>
                {
                    b.HasOne("AutoSerivce.Models.ClientService", "ClientService")
                        .WithMany("ProductSales")
                        .HasForeignKey("ClientServiceId")
                        .HasConstraintName("FK_ProductSale_ClientService");

                    b.HasOne("AutoSerivce.Models.Product", "Product")
                        .WithMany("ProductSales")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductSale_Product");

                    b.Navigation("ClientService");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AutoSerivce.Models.ServicePhoto", b =>
                {
                    b.HasOne("AutoSerivce.Models.Service", "Service")
                        .WithMany("ServicePhotos")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_ServicePhoto_Service");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AutoSerivce.Models.TagOfClient", b =>
                {
                    b.HasOne("AutoSerivce.Models.Client", "Client")
                        .WithMany("TagOfClients")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_TagOfClient_Client");

                    b.HasOne("AutoSerivce.Models.Tag", "Tag")
                        .WithMany("TagOfClients")
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK_TagOfClient_Tag");

                    b.Navigation("Client");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("AutoSerivce.Models.Client", b =>
                {
                    b.Navigation("ClientServices");

                    b.Navigation("TagOfClients");
                });

            modelBuilder.Entity("AutoSerivce.Models.ClientService", b =>
                {
                    b.Navigation("DocumentByServices");

                    b.Navigation("ProductSales");
                });

            modelBuilder.Entity("AutoSerivce.Models.Gender", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("AutoSerivce.Models.Manufacturer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("AutoSerivce.Models.Product", b =>
                {
                    b.Navigation("AttachedProductAttachedProductNavigations");

                    b.Navigation("AttachedProductMainProducts");

                    b.Navigation("ProductPhotos");

                    b.Navigation("ProductSales");
                });

            modelBuilder.Entity("AutoSerivce.Models.Service", b =>
                {
                    b.Navigation("ClientServices");

                    b.Navigation("ServicePhotos");
                });

            modelBuilder.Entity("AutoSerivce.Models.Tag", b =>
                {
                    b.Navigation("TagOfClients");
                });
#pragma warning restore 612, 618
        }
    }
}
